<?xml version="1.0" encoding="UTF-8"?>
<!-- scan 是否定期扫描xml文件， scanPeriod是说扫描周期是30秒 debug当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态，默认值为 false-->
<configuration scan="true" scanPeriod="60 seconds" debug="false" packagingData="true" >
  <!-- 项目名称 -->
  <contextName>app-analysis</contextName>
  <!-- 属性 -->
  <property name="Log_path" value="D:/logs/logback/appanalysis"/>
  <!-- Insert the current time formatted as "yyyyMMdd'T'HHmmss" under
       the key "bySecond" into the logger context. This value will be
       available to all subsequent configuration elements. -->
  <timestamp key="bySecond" datePattern="yyyy-MM-dd" timeReference="contextBirth"/>
    
  <!-- appender很重要，一个配置文件会有多个appender -->
  <!-- ConsoleApperder意思是从console中打印出来 -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">   
  	<!-- 过滤器，一个appender可以有多个 -->
    <!-- 阈值过滤，就是log行为级别过滤，此处debug及debug以上的信息会被打印出来 -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
       <level>debug</level>
    </filter>
    <!-- encoder编码规则 默认配置为PatternLayoutEncoder -->   
    <encoder>   
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>   
    </encoder>   
  </appender>
  
  <!-- FileAppender 输出到文件 -->
  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
     <!-- 文件存放位置 %{xxx} 就是之前定义的属性xxx -->
     <file>${Log_path}/applog-${bySecond}.log</file>
     <!-- append：如果是 true，日志被追加到文件结尾；如果是 false，清空现存文件，默认是 true -->
     <append>true</append>
     <!-- prudent：如果是 true，日志会被安全的写入文件，即使其他的 FileAppender 也在向此文件做写入操作，效率低，默认是 false -->
     <prudent>true</prudent>
     <encoder>
        <!-- %date和%d是一个意思 %file是所在文件 %line是所在行 -->
        <pattern>%date %level [%thread] %logger{30} [%file:%line] %msg%n</pattern>
     </encoder>
  </appender> 
  
  <!-- 滚动日志文件，这个比较常用 -->
  <appender name="ROLLINGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
     <prudent>true</prudent>
     <!-- 按天新建log日志 -->
     <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
         <!-- daily rollover -->
         <fileNamePattern>${Log_path}/logFile_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
         <!-- 保留30天的历史日志 -->
         <maxHistory>30</maxHistory>
            
         <!-- 基于大小和时间，这个可以有，可以没有 -->
         <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
           <!-- or whenever the file size reaches 100MB -->
           <!-- 当一个日志大小大于100MB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
           <maxFileSize>100MB</maxFileSize>
         </timeBasedFileNamingAndTriggeringPolicy>
      </rollingPolicy>

      <encoder>
         <!-- %ex就是指抛出的异常，full是显示全部，如果在{}中写入数字，则表示展示多少行 -->
         <!-- <pattern>%-4date [%thread] %-5level %logger{35} - %msg%n%ex{full, DISPLAY_EX_EVAL}</pattern> -->
         <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
      </encoder>
  </appender> 
  
  <!-- 上边都是appender输出源,这里是looger-->
  <!-- name用来指定此 logger约束的某一个包或者具体的某一个类 level设置打印机别 additivity是否向上级 logger 传递打印信息,传递的话父类级别也会打印，默认是 true-->   
  <!-- 
  		下面定义了四个 logger，他们的父子关系从小到大为： 
		com.lwc.qg.test.logbackDemo → com.lwc.qg.test → com.lwc.qg → root
   -->
  <logger name="com.iflytek.xfyun" level="DEBUG" additivity="false">
  	<appender-ref ref="STDOUT"/>
    <appender-ref ref="ROLLINGFILE"/>
    <appender-ref ref="FILE"/> 
  </logger>
   
  <!-- 这就是上边logger没有管到的情况下 root默认接管所有logger -->
  <root level="DEBUG">             
    <appender-ref ref="STDOUT" />  
    <appender-ref ref="ROLLINGFILE"/>
    <appender-ref ref="FILE"/>  
  </root>
</configuration>